import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

// ÁîªÂÉè„ÅÆ„Ç§„É≥„Éù„Éº„Éà
import toriiImage from './assets/torii.gif';
import keidaiImage from './assets/keidai.gif';
import emakakeImage from './assets/emakake.png';
import emaImage from './assets/ema.png';
import characterImage from './assets/character.png';
import minnaNoEmaImage from './assets/minna_no_ema.png';
import mikoCharacter from './assets/miko-character.png'; // Êñ∞„Åó„ÅÑÂ∑´Â•≥„Ç≠„É£„É©„ÇØ„Çø„Éº

// Èü≥Â£∞„Éï„Ç°„Ç§„É´„ÅÆ„Ç§„É≥„Éù„Éº„Éà
import suzuSound from './assets/Á•ûÁ§æ„ÅÆÈà¥„ÇíÈ≥¥„Çâ„Åô.mp3';

const App = () => {
  const [step, setStep] = useState(0); // 0: ÂàùÊúüÁîªÈù¢, 1: È≥•Â±Ö, 2: Â¢ÉÂÜÖ, 3: ÁµµÈ¶¨Êéõ„Åë, 4: ÁµµÈ¶¨, 5: „Åø„Çì„Å™„ÅÆÁµµÈ¶¨
  const [wish, setWish] = useState('');
  const [name, setName] = useState('');
  const [displayWish, setDisplayWish] = useState('');
  const [displayName, setDisplayName] = useState('');
  const [showWishForm, setShowWishForm] = useState(false); // È°ò„ÅÑ‰∫ã„Éï„Ç©„Éº„É†„ÅÆË°®Á§∫Áä∂ÊÖã
  const [selectedCharacter, setSelectedCharacter] = useState(null); // ÈÅ∏Êäû„Åï„Çå„Åü„Ç≠„É£„É©„ÇØ„Çø„Éº
  const [characters, setCharacters] = useState([]); // CSV„Åã„ÇâË™≠„ÅøËæº„Çì„Å†„Ç≠„É£„É©„ÇØ„Çø„Éº‰∏ÄË¶ß
  const [loading, setLoading] = useState(true); // Ë™≠„ÅøËæº„ÅøÁä∂ÊÖã
  const [searchTerm, setSearchTerm] = useState(''); // Ê§úÁ¥¢„Ç≠„Éº„ÉØ„Éº„Éâ
  const audioRef = useRef(null);
  const inputRef = useRef(null);

  // „ÅÑ„ÅÑ„Å≠Êï∞„Å®Ëá™ÂàÜ„ÅåÊäº„Åó„Åü„Åã„Å©„ÅÜ„Åã„ÅÆÁÆ°ÁêÜ
  const [likesMap, setLikesMap] = useState({}); // { [ema.id]: likeCount }
  const [likedSet, setLikedSet] = useState(new Set()); // Set of liked ema ids

  // „Åø„Çì„Å™„ÅÆÁµµÈ¶¨„Éá„Éº„Çø
  const otherEmas = [
    { id: 1, wish: '‰∏ñÁïåÂπ≥Âíå', name: 'ÂêçÁÑ°„Åó' },
    { id: 2, wish: 'ÂÆù„Åè„Åò„ÅåÂΩì„Åü„Çä„Åæ„Åô„Çà„ÅÜ„Å´', name: 'ÂåøÂêçÂ∏åÊúõ' },
    { id: 3, wish: 'ÂÅ•Â∫∑Á¨¨‰∏Ä', name: 'ÂÅ•Â∫∑ÂøóÂêë' },
    { id: 4, wish: 'ËâØÁ∏Å„Å´ÊÅµ„Åæ„Çå„Åæ„Åô„Çà„ÅÜ„Å´', name: 'Á∏ÅÁµê„Å≥' },
    { id: 5, wish: 'ÂïÜÂ£≤ÁπÅÁõõ', name: '‰∫ãÊ•≠‰∏ª' },
    { id: 6, wish: 'Â≠¶Ê•≠ÊàêÂ∞±', name: 'Â≠¶Áîü' },
    { id: 7, wish: 'ÂÆ∂ÂÜÖÂÆâÂÖ®', name: '‰∏ªÂ©¶' },
    { id: 8, wish: 'ÁÑ°ÁóÖÊÅØÁÅΩ', name: 'Èï∑ÂØø' },
    { id: 9, wish: 'ÂøÉÈ°òÊàêÂ∞±', name: 'Á•àÈ°ò' },
    { id: 10, wish: 'Ë©¶È®ìÂêàÊ†º', name: 'ÂèóÈ®ìÁîü' },
    { id: 11, wish: 'ÊÅãÊÑõÊàêÂ∞±', name: 'ÊÅã„Åô„Çã‰∫∫' },
    { id: 12, wish: '‰ªï‰∫ã„Åå„ÅÜ„Åæ„Åè„ÅÑ„Åç„Åæ„Åô„Çà„ÅÜ„Å´', name: '‰ºöÁ§æÂì°' },
    { id: 13, wish: 'ÂÆ∂Êóè„Åø„Çì„Å™„ÅåÂπ∏„Åõ„Åß„ÅÇ„Çä„Åæ„Åô„Çà„ÅÜ„Å´', name: 'ÂÆ∂ÊóèÊÄù„ÅÑ' },
    { id: 14, wish: 'Â§¢„ÅåÂè∂„ÅÑ„Åæ„Åô„Çà„ÅÜ„Å´', name: 'Â§¢ËøΩ„ÅÑ‰∫∫' },
    { id: 15, wish: 'ÊØéÊó•„ÅåÊ•Ω„Åó„ÅèÈÅé„Åî„Åõ„Åæ„Åô„Çà„ÅÜ„Å´', name: 'Ê•ΩÂ§©ÂÆ∂' },
  ].map(ema => ({ ...ema, createdAt: Date.now() - (16 - ema.id) * 60000 })); // id„ÅåÂ§ß„Åç„ÅÑ„Åª„Å©Êñ∞„Åó„ÅÑ

  // CSV„Éï„Ç°„Ç§„É´„Åã„Çâ„Ç≠„É£„É©„ÇØ„Çø„ÉºÊÉÖÂ†±„ÇíË™≠„ÅøËæº„ÇÄ
  useEffect(() => {
    const loadCharacters = async () => {
      try {
        const response = await fetch(`${import.meta.env.BASE_URL}characters.csv`);
        const csvText = await response.text();
        const lines = csvText.split('\n');
        const headers = lines[0].split(',');
        
        const characterData = lines.slice(1).filter(line => line.trim()).map(line => {
          const values = line.split(',');
          return {
            id: parseInt(values[0]),
            name: values[1],
            image_path: values[2],
            description: values[3]
          };
        });
        
        setCharacters(characterData);
        setLoading(false);
      } catch (error) {
        console.error('CSV„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', error);
        // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: „Éá„Éï„Ç©„É´„Éà„ÅÆ„Ç≠„É£„É©„ÇØ„Çø„Éº
        setCharacters([
          { id: 1, name: '„ÅäÁ®≤Ëç∑Êßò', image_path: characterImage, description: 'ÂïÜÂ£≤ÁπÅÁõõ„ÅÆÁ•ûÊßò' },
          { id: 2, name: '‰∏ÉÁ¶èÁ•û', image_path: characterImage, description: 'Á¶è„ÇíÊãõ„ÅèÁ•ûÊßò' },
          { id: 3, name: 'Â§©Áãó', image_path: characterImage, description: 'Â±±„ÅÆ‰øÆË°åËÄÖ' },
          { id: 4, name: 'Áãê', image_path: characterImage, description: 'Á®≤Ëç∑„ÅÆ‰Ωø„ÅÑ' }
        ]);
        setLoading(false);
      }
    };

    loadCharacters();
  }, []);

  useEffect(() => {
    if (step === 2 && inputRef.current) {
      inputRef.current.focus();
    }
  }, [step]);

  const handleInitialClick = () => {
    setStep(1);
  };

  const handleToriiClick = () => {
    setStep(2);
  };

  const handleSuzuClick = () => {
    if (audioRef.current) {
      audioRef.current.play().catch(e => console.log('Audio play failed:', e));
    }
    setShowWishForm(true); // Èêò„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„ÅüÂæå„Å´„Éï„Ç©„Éº„É†„ÇíË°®Á§∫
  };

  const handleWishSubmit = (e) => {
    e.preventDefault();
    setDisplayWish(wish);
    setDisplayName(name);
    setStep(3); // ÁµµÈ¶¨Êéõ„Åë„Åß„ÅØ„Å™„Åè„ÄÅ„Ç≠„É£„É©„ÇØ„Çø„ÉºÈÅ∏ÊäûÁîªÈù¢„Å´ÁßªÂãï
  };

  const handleCharacterSelect = (character) => {
    setSelectedCharacter(character);
    setStep(4); // Ëá™ÂàÜ„ÅÆÁµµÈ¶¨ÁîªÈù¢„Å´ÁßªÂãï
  };

  const handleEmakakeClick = () => {
    setStep(4);
  };

  const handleEmaClick = () => {
    setStep(5);
  };

  const handleRestartClick = () => {
    setStep(0);
    setWish('');
    setName('');
    setDisplayWish('');
    setDisplayName('');
  };

  const handleViewMyEmaClick = () => {
    setStep(4);
  };

  // Ê§úÁ¥¢„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
  const filteredCharacters = characters.filter(character =>
    character.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    character.description.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const renderContent = () => {
    switch (step) {
      case 0:
        return (
          <div className="fixed inset-0 w-screen h-screen overflow-hidden" onClick={handleInitialClick}>
            <img src={characterImage} alt="Character" className="fs-img" />
            <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center">
              <h1 className="text-white text-5xl font-bold animate-pulse">„Çø„Ç§„Éà„É´</h1>
            </div>
          </div>
        );
      case 1:
        return (
          <div className="fixed inset-0 w-screen h-screen overflow-hidden" onClick={handleToriiClick}>
            <img src={toriiImage} alt="Torii" className="fs-img" />
          </div>
        );
      case 2:
        return (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.6, ease: 'easeInOut' }}
            className="fixed inset-0 w-screen h-screen overflow-hidden"
          >
            <img src={keidaiImage} alt="Keidai" className="fs-img" />
            <div
              className="absolute cursor-pointer bg-transparent"
              onClick={handleSuzuClick}
              style={{ 
                top: '60%', 
                left: '50%', 
                width: '10%', 
                height: '15%',
                transform: 'translate(-50%, -50%)',
                zIndex: 10
              }}
            ></div>
            <audio ref={audioRef} src={suzuSound} preload="auto" />
            {showWishForm && (
              <form onSubmit={handleWishSubmit} className="absolute p-4 rounded-lg shadow-lg w-1/2"
                style={{ top: '70%', left: '50%', transform: 'translate(-50%, -50%)', backgroundColor: 'rgba(255, 255, 255, 0.8)' }}>
                <textarea
                  ref={inputRef}
                  className="w-full p-2 mb-2 border border-gray-300 rounded-md resize-none focus:outline-none focus:ring-2 focus:ring-blue-500"
                  rows="4"
                  placeholder="È°ò„ÅÑ‰∫ã„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ..."
                  value={wish}
                  onChange={(e) => setWish(e.target.value)}
                  required
                ></textarea>
                <input
                  type="text"
                  className="w-full p-2 mb-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="ÂêçÂâç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ..."
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                />
                <button
                  type="submit"
                  className="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-md transition duration-300"
                >
                  È°ò„ÅÑ‰∫ã„ÇíÊõ∏„Åè
                </button>
              </form>
            )}
          </motion.div>
        );
      case 3:
        return (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.6, ease: 'easeInOut' }}
            className="fixed inset-0 w-screen h-screen overflow-hidden bg-gradient-to-b from-orange-200 to-orange-400"
          >
            <div className="absolute inset-0 p-8 overflow-y-auto">
              <h1 className="text-3xl font-bold text-center text-white mb-8 drop-shadow-lg">
                „Ç≠„É£„É©„ÇØ„Çø„Éº„ÇíÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑ
              </h1>
              
              {/* Ê§úÁ¥¢„Éú„ÉÉ„ÇØ„Çπ */}
              <div className="max-w-md mx-auto mb-8">
                <div className="relative">
                  <input
                    type="text"
                    placeholder="„Ç≠„É£„É©„ÇØ„Çø„ÉºÂêç„ÇÑË™¨Êòé„ÅßÊ§úÁ¥¢..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full px-4 py-3 pl-12 bg-white rounded-lg shadow-lg focus:outline-none focus:ring-2 focus:ring-orange-500 text-gray-800"
                  />
                  <div className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400">
                    üîç
                  </div>
                  {searchTerm && (
                    <button
                      onClick={() => setSearchTerm('')}
                      className="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                    >
                      ‚úï
                    </button>
                  )}
                </div>
                {searchTerm && (
                  <p className="text-white text-sm mt-2 text-center">
                    {filteredCharacters.length}‰ª∂„ÅÆ„Ç≠„É£„É©„ÇØ„Çø„Éº„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü
                  </p>
                )}
              </div>

              {loading ? (
                <div className="flex justify-center items-center h-64">
                  <div className="text-white text-xl">Ë™≠„ÅøËæº„Åø‰∏≠...</div>
                </div>
              ) : (
                <>
                  {filteredCharacters.length === 0 ? (
                    <div className="text-center text-white">
                      <div className="text-2xl mb-4">üòî</div>
                      <p className="text-lg mb-2">Ë©≤ÂΩì„Åô„Çã„Ç≠„É£„É©„ÇØ„Çø„Éº„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü</p>
                      <p className="text-sm opacity-80">Ê§úÁ¥¢„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíÂ§âÊõ¥„Åó„Å¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ</p>
                    </div>
                  ) : (
                    <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 max-w-6xl mx-auto">
                      {filteredCharacters.map((character) => (
                        <div 
                          key={character.id} 
                          className="bg-white rounded-lg shadow-lg p-4 cursor-pointer transform hover:scale-105 transition-transform duration-300 flex flex-col items-center aspect-[3/4] h-64 w-44"
                          onClick={() => handleCharacterSelect(character)}
                        >
                          <div className="w-full h-4/5 flex items-center justify-center mb-3">
                            <img 
                              src={character.image_path} 
                              alt={character.name} 
                              className="h-full w-full object-contain"
                              onError={(e) => {
                                e.target.src = characterImage; // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÁîªÂÉè
                              }}
                            />
                          </div>
                          <p className="text-center text-sm font-bold text-gray-800 mb-1">
                            {character.name}
                          </p>
                          <p className="text-center text-xs text-gray-600">
                            {character.description}
                          </p>
                        </div>
                      ))}
                    </div>
                  )}
                </>
              )}
            </div>
          </motion.div>
        );
      case 4:
        return (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.6, ease: 'easeInOut' }}
            className="fixed inset-0 w-screen h-screen overflow-hidden"
          >
            <img src={emaImage} alt="Ema" className="fs-img" />
            {/* „Ç≠„É£„É©„ÇØ„Çø„ÉºÁîªÂÉè„ÇíÁµµÈ¶¨„ÅÆÂè≥‰∏ã„Å´ÈÖçÁΩÆ */}
            {selectedCharacter && (
              <div 
                className="absolute z-10"
                style={{ 
                  bottom: '80px', 
                  right: '400px' 
                }}
              >
                <img 
                  src={selectedCharacter.image_path} 
                  alt={selectedCharacter.name} 
                  className="w-60 h-70 object-contain"
                />
              </div>
            )}
            <p
              className="absolute text-black text-5xl font-handwriting"
              style={{
                top: '50%',
                left: '50%',
                transform: 'translate(-50%, -50%)',
                width: '60%',
                textAlign: 'center',
                whiteSpace: 'pre-wrap',
                fontFamily: '"Klee One", "Hina Mincho", "Noto Sans JP", cursive',
                textShadow: '2px 2px 4px rgba(255,255,255,0.9)',
              }}
            >
              {displayWish}
            </p>
            <p
              className="absolute text-black text-4xl font-handwriting"
              style={{
                bottom: '15%',
                right: '77%',
                transform: 'translateX(50%)',
                fontFamily: '"Klee One", "Hina Mincho", "Noto Sans JP", cursive',
                textShadow: '2px 2px 4px rgba(255,255,255,0.9)',
              }}
            >
              {displayName}
            </p>
            <button
              onClick={handleEmaClick}
              className="absolute bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-md transition duration-300"
              style={{ bottom: '5%', left: '50%', transform: 'translateX(-50%)' }}
            >
              „Åø„Çì„Å™„ÅÆÁµµÈ¶¨„ÇíË¶ã„Çã
            </button>
          </motion.div>
        );
      case 5:
        // Ëá™ÂàÜ„ÅÆÁµµÈ¶¨„ÇíotherEmas„ÅÆÂÖàÈ†≠„Å´ËøΩÂä†
        const myEma = displayWish && displayName ? {
          id: 'my-ema',
          wish: displayWish,
          name: displayName,
          character: selectedCharacter,
          createdAt: Date.now()
        } : null;
        const allEmaList = [
          myEma,
          ...otherEmas
        ].filter(Boolean)
         .sort((a, b) => b.createdAt - a.createdAt); // Êñ∞ÁùÄÈ†Ü

        // „ÅÑ„ÅÑ„Å≠„Éú„Çø„É≥„ÅÆ„Éè„É≥„Éâ„É©
        const handleLike = (id) => {
          if (likedSet.has(id)) return; // 1‰∫∫1Âõû
          setLikesMap(prev => ({ ...prev, [id]: (prev[id] || 0) + 1 }));
          setLikedSet(prev => new Set([...prev, id]));
        };

        return (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.6, ease: 'easeInOut' }}
            className="fixed inset-0 w-screen h-screen overflow-hidden bg-gradient-to-b from-orange-200 to-orange-400"
          >
            <div className="absolute inset-0 overflow-y-auto p-8">
              {/* ÁµµÈ¶¨Ë≥ºÂÖ•„É™„É≥„ÇØ */}
              <div className="flex justify-center mb-6">
                <a
                  href="https://newrona.jp/melofinity"
                  target="_blank"
                  rel="noopener noreferrer"
                  className="inline-block bg-yellow-300 hover:bg-yellow-400 text-red-700 font-bold py-3 px-6 rounded-lg shadow-lg text-xl transition mb-4 border-2 border-yellow-500 animate-pulse"
                  style={{ textDecoration: 'none' }}
                >
                  ÁµµÈ¶¨„ÅÆË≥ºÂÖ•„ÅØ„Åì„Å°„Çâ
                </a>
              </div>
              <h1 className="text-3xl font-bold text-center text-white mb-8 drop-shadow-lg">
                „Åø„Çì„Å™„ÅÆÁµµÈ¶¨
              </h1>
              <div className="grid grid-cols-4 gap-4 max-w-7xl mx-auto">
                {allEmaList.map((ema) => (
                  <div key={ema.id} className="relative transform hover:scale-105 transition-transform duration-300 bg-transparent">
                    <img 
                      src={minnaNoEmaImage} 
                      alt="ÁµµÈ¶¨" 
                      className="w-full h-64 object-cover rounded-md bg-transparent"
                      style={{ backgroundColor: 'transparent' }}
                    />
                    <div className="absolute inset-0 flex flex-col justify-center items-center p-4 pointer-events-none">
                      <p className="text-lg text-black mb-3 font-medium text-center leading-tight"
                         style={{
                           fontFamily: '"Hina Mincho", serif',
                           textShadow: '2px 2px 4px rgba(255,255,255,0.9)',
                           maxWidth: '70%',
                           position: 'absolute',
                           top: '60%',
                           left: '50%',
                           transform: 'translate(-50%, -50%)'
                         }}>
                        {ema.wish}
                      </p>
                      <p className="text-sm text-black font-medium"
                         style={{
                           fontFamily: '"Hina Mincho", serif',
                           textShadow: '2px 2px 4px rgba(255,255,255,0.9)',
                           position: 'absolute',
                           bottom: '10%',
                           right: '70%',
                           transform: 'translateX(50%)'
                         }}>
                        {ema.name}
                      </p>
                      {/* Ëá™ÂàÜ„ÅÆÁµµÈ¶¨„Åß„Ç≠„É£„É©„ÇØ„Çø„ÉºÁîªÂÉè„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆ„ÅøÂè≥‰∏ã„Å´Ë°®Á§∫ */}
                      {ema.id === 'my-ema' && ema.character && (
                        <img
                          src={ema.character.image_path}
                          alt={ema.character.name}
                          className="absolute w-16 h-16 object-contain"
                          style={{ bottom: '8%', right: '12%' }}
                          onError={e => { e.target.src = characterImage; }}
                        />
                      )}
                      {/* „ÅÑ„ÅÑ„Å≠„Éú„Çø„É≥ */}
                      <button
                        type="button"
                        className="absolute flex items-center gap-1 px-2 py-1 rounded-full bg-white bg-opacity-80 shadow text-pink-600 text-sm font-bold pointer-events-auto hover:bg-pink-100 transition"
                        style={{ bottom: '8%', left: '8%' }}
                        onClick={() => handleLike(ema.id)}
                        disabled={likedSet.has(ema.id)}
                        aria-label="„ÅÑ„ÅÑ„Å≠"
                      >
                        <span role="img" aria-label="like">‚ù§Ô∏è</span>
                        {likesMap[ema.id] || 0}
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
            <div className="absolute bottom-8 left-1/2 transform -translate-x-1/2 flex flex-col gap-4 z-10">
              <button
                onClick={handleViewMyEmaClick}
                className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-6 rounded-md transition duration-300 shadow-lg"
              >
                Ëá™ÂàÜ„ÅÆÁµµÈ¶¨„ÇíË¶ã„Çã
              </button>
              <button
                onClick={handleRestartClick}
                className="bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-6 rounded-md transition duration-300 shadow-lg"
              >
                „ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäÂèÇ„Çä„Çí„Åô„Çã
              </button>
            </div>
          </motion.div>
        );
      default:
        return null;
    }
  };

  return (
    <AnimatePresence>
      <motion.div
        key={step}
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        transition={{ duration: 0.6, ease: 'easeInOut' }}
        className="fixed inset-0 w-screen h-screen"
      >
        {renderContent()}
      </motion.div>
    </AnimatePresence>
  );
};

export default App;
